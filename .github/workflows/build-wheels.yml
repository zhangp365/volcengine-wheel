name: Build and Release Wheels

on:
  workflow_dispatch:
    inputs:
      version:
        description: '火山引擎SDK版本号 (例如: v1.0.0)'
        required: true
        type: string
      source_repo:
        description: '源代码仓库地址'
        required: false
        default: 'https://github.com/volcengine/volc-sdk-python.git'
        type: string
  schedule:
    # 每天凌晨2点运行
    - cron: '0 2 * * *'

jobs:
  check-new-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    outputs:
      has_new_version: ${{ steps.check.outputs.has_new_version }}
      latest_version: ${{ steps.check.outputs.latest_version }}
      latest_commit: ${{ steps.check.outputs.latest_commit }}
    
    steps:
    - name: 检查最新版本
      id: check
      run: |
        # 获取最新的tag
        latest_tag=$(git ls-remote --tags https://github.com/volcengine/volc-sdk-python.git | grep -v '{}' | tail -1 | sed 's/.*refs\/tags\///')
        echo "最新版本: $latest_tag"
        
        # 获取最新commit
        latest_commit=$(git ls-remote https://github.com/volcengine/volc-sdk-python.git HEAD | cut -f1)
        echo "最新commit: $latest_commit"
        
        # 检查是否已经发布过这个版本
        if gh release view "$latest_tag" --repo ${{ github.repository }} 2>/dev/null; then
          echo "版本 $latest_tag 已经发布过，跳过构建"
          echo "has_new_version=false" >> $GITHUB_OUTPUT
        else
          echo "发现新版本 $latest_tag，准备构建"
          echo "has_new_version=true" >> $GITHUB_OUTPUT
        fi
        
        echo "latest_version=$latest_tag" >> $GITHUB_OUTPUT
        echo "latest_commit=$latest_commit" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-wheels-manual:
    runs-on: windows-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 安装构建依赖
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools build
        
    - name: 克隆火山引擎SDK源码
      run: |
        git clone https://github.com/volcengine/volc-sdk-python.git volc-sdk-source
        cd volc-sdk-source
        git checkout ${{ github.event.inputs.version }}
        
    - name: 构建wheel包
      run: |
        cd volc-sdk-source
        python -m build --wheel
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: wheel-package-manual
        path: volc-sdk-source/dist/*.whl

  build-wheels-auto:
    runs-on: windows-latest
    needs: [check-new-version]
    if: github.event_name == 'schedule' && needs.check-new-version.outputs.has_new_version == 'true'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 安装构建依赖
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools build
        
    - name: 克隆火山引擎SDK源码
      run: |
        git clone https://github.com/volcengine/volc-sdk-python.git volc-sdk-source
        cd volc-sdk-source
        git checkout ${{ needs.check-new-version.outputs.latest_version }}
        
    - name: 构建wheel包
      run: |
        cd volc-sdk-source
        python -m build --wheel
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: wheel-package-auto
        path: volc-sdk-source/dist/*.whl
        
  create-release-manual:
    needs: [build-wheels-manual]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 下载构建产物
      uses: actions/download-artifact@v4
      with:
        name: wheel-package-manual
        path: wheels
        
    - name: 整理文件
      run: |
        mkdir -p release-files
        # 复制所有wheel文件到release目录
        cp wheels/*.whl release-files/
        echo "=== 整理后的文件 ==="
        ls -la release-files/
        
    - name: 创建Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: Release ${{ github.event.inputs.version }}
        body: |
          ## 火山引擎SDK ${{ github.event.inputs.version }}
          
          包含通用的wheel包，支持所有Python版本。
          
          构建时间: ${{ github.event.head_commit.timestamp }}
        files: release-files/*.whl
        generate_release_notes: false
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

  create-release-auto:
    needs: [check-new-version, build-wheels-auto]
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && needs.check-new-version.outputs.has_new_version == 'true'
    
    steps:
    - name: 下载构建产物
      uses: actions/download-artifact@v4
      with:
        name: wheel-package-auto
        path: wheels
        
    - name: 整理文件
      run: |
        mkdir -p release-files
        # 复制所有wheel文件到release目录
        cp wheels/*.whl release-files/
        echo "=== 整理后的文件 ==="
        ls -la release-files/
        
    - name: 创建Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.check-new-version.outputs.latest_version }}
        name: Release ${{ needs.check-new-version.outputs.latest_version }}
        body: |
          ## 火山引擎SDK ${{ needs.check-new-version.outputs.latest_version }}
          
          包含通用的wheel包，支持所有Python版本。
          
          自动构建 - 触发时间: ${{ github.event.schedule }}
        files: release-files/*.whl
        generate_release_notes: false
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }} 